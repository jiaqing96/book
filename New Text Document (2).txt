trigger TriggerLock on Accounting_Entry__c (before insert,before update) {
    List<Accounting_Entry__c> newlistlock=new List<Accounting_Entry__c>();
    if(Trigger.isBefore && Trigger.isInsert){
        for(Accounting_Entry__c a:trigger.new){
            if(a.Occurred_Date__c<System.now()&&a.Occurred_Date__c>System.now().addMonths(-1)){
                
                }
            else if(a.Occurred_Date__c<System.now().addMonths(-1)){
                a.Locked__c=true;
                }
        }
    }
    if(Trigger.isBefore && Trigger.isUpdate){
        for(Accounting_Entry__c a:trigger.new){
            if(a.Occurred_Date__c<System.now()&&a.Occurred_Date__c>System.now().addMonths(-1)){
               
                }
            else if(a.Occurred_Date__c<System.now().addMonths(-1)){
                a.Locked__c=true;
                }

    }
   
}
}


/**************************************************************************************************
 * Name           : UpdateAccountingEntryBatch
 * Object         : Accounting_Entry__c
 * Requirement    : Schedule daily job
 * Target         :
 * Refer classes  :
 * Author         : Liu Jiaqing(jiaiqng.liu@accenture.com)
 * Create Date    : 2020-12-01
 * Modify History : 
 **************************************************************************************************/
Global Class UpdateAccountingEntryBatch Implements Database.Batchable<Sobject> {
    /*
    *  Name : Start
    *  Type : Database.QueryLocator
    *  Description : select Locked__c field in Accounting_Entry__c object where the Occurred_Date__c field in more than one month
    */
    Global Database.QueryLocator Start ( Database.BatchableContext bc ) {
        return Database.getQueryLocator ( [Select Locked__c From Accounting_Entry__c Where Occurred_Date__c < LAST_N_MONTHS:1] );
    }
    /*
    *  Name : Execute
    *  Type : Void
    *  Description : Traversal Accounting_Entry__c object and locked qualified records 
    */
    Global Void Execute ( Database.BatchableContext bc, List<Accounting_Entry__c> scope ) {
        List<Accounting_Entry__c> UpdateAccountingEntryList = new List<Accounting_Entry__c>();
            for ( Accounting_Entry__c a : scope ) {
                    a.Locked__c=true;
            }
    }
    /* 
    *  Name : Finish
    *  Type : Void
    *  Description :
    */      
    Global Void Finish ( Database.BatchableContext bc ) {   
    }    
}


/**************************************************************************************************
 * Name           : UpdateAccountingEntryBatchScheduler
 * Object         : 
 * Requirement    : Schedule daily job
 * Target         :
 * Refer classes  : UpdateAccountingEntryBatch
 * Author         : Liu Jiaqing(jiaiqng.liu@accenture.com)
 * Create Date    : 2020-12-01
 * Modify History : 
 **************************************************************************************************/
Global Class UpdateAccountingEntryBatchScheduler Implements Schedulable {
    /*
    *  Name : Execute
    *  Type : Void
    *  Description : Instantiate class UpdateAccountingEntryBatch and run it in the database
    */
    Global Void Execute ( SchedulableContext sc ) {
        UpdateAccountingEntryBatch b = new UpdateAccountingEntryBatch(); 
        Database.executebatch(b);
    }
}
